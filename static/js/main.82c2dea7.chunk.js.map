{"version":3,"sources":["Components/CodeGenerator.tsx","Components/CodeReader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CodeGenerator","useState","qrText","setQrText","qrUrl","setQrUrl","generateQRCode","a","QRCode","toDataURL","response","console","log","className","onSubmit","e","preventDefault","value","onChange","target","type","href","download","src","alt","CodeReader","result","error","scan","setScan","delay","style","width","onScan","data","onError","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAsCeA,MAnCf,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAc,uCAAG,4BAAAC,EAAA,+EAEIC,IAAOC,UAAUP,GAFrB,OAEbQ,EAFa,OAGnBL,EAASK,GAHU,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDAcpB,OACE,sBAAKC,UAAU,sBAAf,UACE,uBAAMA,UAAU,iBAAiBC,SAPhB,SAACC,GACpBA,EAAEC,iBACFV,KAKE,UACE,uBAAOW,MAAOf,EAAQgB,SAAU,SAACH,GAAD,OAAOZ,EAAUY,EAAEI,OAAOF,UAC1D,uBAAOG,KAAK,SAASH,MAAM,qBAE5Bb,EACC,mBAAGiB,KAAMjB,EAAOkB,SAAUpB,EAA1B,SACE,qBAAKW,UAAU,mBAAmBU,IAAKnB,EAAOoB,IAAKtB,MAGrD,O,wBCAOuB,MA7Bf,WACE,MAAwBxB,mBAAS,CAC/ByB,OAAQ,GACRC,MAAO,KAFT,mBAAOC,EAAP,KAAaC,EAAb,KAeA,OACE,sBAAKhB,UAAU,mBAAf,UACE,cAAC,IAAD,CACEiB,MAAO,IACPC,MAAO,CAAEC,MAAO,OAChBC,OAfa,SAACC,GACdA,GACFL,EAAQ,2BAAKD,GAAN,IAAYF,OAAQQ,MAczBC,QAVc,SAACR,GACnBE,EAAQ,2BAAKD,GAAN,IAAYD,cAWjB,oBAAGd,UAAU,gBAAb,kCAAmDe,EAAKF,cCR/CU,MAdf,WACE,OACE,sBAAKvB,UAAU,MAAf,UACE,mCACE,+CACA,qDAEF,cAAC,EAAD,IACA,cAAC,EAAD,IACA,gDCASwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82c2dea7.chunk.js","sourcesContent":["import React, { FormEvent, useState } from \"react\";\r\nimport QRCode from \"qrcode\";\r\n\r\nfunction CodeGenerator() {\r\n  const [qrText, setQrText] = useState(\"\");\r\n  const [qrUrl, setQrUrl] = useState(\"\");\r\n\r\n  const generateQRCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(qrText);\r\n      setQrUrl(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    generateQRCode();\r\n  };\r\n\r\n  return (\r\n    <div className=\"generator-container\">\r\n      <form className=\"generator-form\" onSubmit={handleSubmit}>\r\n        <input value={qrText} onChange={(e) => setQrText(e.target.value)} />\r\n        <input type=\"submit\" value=\"Generate code\" />\r\n      </form>\r\n      {qrUrl ? (\r\n        <a href={qrUrl} download={qrText}>\r\n          <img className=\"generator-result\" src={qrUrl} alt={qrText} />\r\n        </a>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeGenerator;\r\n","import React, { useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nfunction CodeReader() {\r\n  const [scan, setScan] = useState({\r\n    result: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  const handleScan = (data: string | null) => {\r\n    if (data) {\r\n      setScan({ ...scan, result: data });\r\n    }\r\n  };\r\n\r\n  const handleError = (error: string) => {\r\n    setScan({ ...scan, error });\r\n  };\r\n\r\n  return (\r\n    <div className=\"reader-container\">\r\n      <QrReader\r\n        delay={300}\r\n        style={{ width: \"50%\" }}\r\n        onScan={handleScan}\r\n        onError={handleError}\r\n      />\r\n      <p className=\"reader-result\">Scanned code result: {scan.result}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeReader;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport CodeGenerator from \"./Components/CodeGenerator\";\r\nimport CodeReader from \"./Components/CodeReader\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>QRCode center</h1>\r\n        <h2>All in one place</h2>\r\n      </header>\r\n      <CodeGenerator />\r\n      <CodeReader />\r\n      <footer>Footer</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}