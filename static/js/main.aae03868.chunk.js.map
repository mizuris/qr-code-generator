{"version":3,"sources":["Components/CodeGenerator.tsx","Components/CodeReader.tsx","Components/Footer.tsx","Components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CodeGenerator","useState","qrText","setQrText","qrUrl","setQrUrl","generateQRCode","a","QRCode","toDataURL","response","console","log","handleSubmit","e","preventDefault","className","Form","onSubmit","Control","type","value","placeholder","onChange","target","Button","variant","href","download","src","alt","CodeReader","result","error","scan","setScan","options","legacyMode","resolution","delay","facingMode","onScan","data","onError","Footer","Container","Header","App","displayComponent","setDisplayComponent","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aae03868.chunk.js","sourcesContent":["import React, { FormEvent, useState } from \"react\";\r\nimport QRCode from \"qrcode\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nfunction CodeGenerator() {\r\n  const [qrText, setQrText] = useState(\"\");\r\n  const [qrUrl, setQrUrl] = useState(\"\");\r\n  // const downloadRef = useRef();\r\n\r\n  const generateQRCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(qrText);\r\n      setQrUrl(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    await generateQRCode();\r\n    setQrText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-container generator-container\">\r\n      <Form className=\"generator-form ml-auto mr-auto\" onSubmit={handleSubmit}>\r\n        <Form.Control\r\n          className=\"generator-input\"\r\n          type=\"text\"\r\n          value={qrText}\r\n          placeholder=\"Text to convert\"\r\n          onChange={(e) => setQrText(e.target.value)}\r\n        />\r\n        <Button className=\"generator-button\" type=\"submit\" variant=\"warning\">\r\n          Generate\r\n        </Button>\r\n      </Form>\r\n      <div className=\"generator-result ml-auto mr-auto\" key={qrUrl}>\r\n        {qrUrl ? (\r\n          <>\r\n            <a href={qrUrl} download={qrText}>\r\n              <img className=\"generator-result-img\" src={qrUrl} alt={qrText} />\r\n            </a>\r\n            <p className=\"generator-result-text text-muted\">\r\n              Click the code to dowload it.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeGenerator;\r\n","import React, { useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nfunction CodeReader() {\r\n  const [scan, setScan] = useState({\r\n    result: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  const options = {\r\n    legacyMode: false,\r\n    resolution: 600,\r\n    delay: 500,\r\n  };\r\n\r\n  const handleScan = (data: string | null) => {\r\n    if (data) {\r\n      setScan({ ...scan, result: data });\r\n    }\r\n  };\r\n\r\n  const handleError = (error: string) => {\r\n    setScan({ ...scan, error });\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-container\">\r\n      <QrReader\r\n        className=\"reader-content ml-auto mr-auto\"\r\n        legacyMode={options.legacyMode}\r\n        resolution={options.resolution}\r\n        delay={options.delay}\r\n        facingMode={\"environment\"}\r\n        onScan={handleScan}\r\n        onError={handleError}\r\n      />\r\n      {scan.result ? (\r\n        <div className=\"reader-result\" key={scan.result}>\r\n          <h6 className=\"text-muted\">Scanned code result:</h6>\r\n          <a className=\"reader-result-text\" href={scan.result} target=\"blank\">\r\n            {scan.result}\r\n          </a>\r\n        </div>\r\n      ) : (\r\n        <div className=\"reader-no-result\">\r\n          <h6 className=\"text-muted\">Scan QR code to get result.</h6>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeReader;\r\n","import React from \"react\";\r\nimport { Button, Container } from \"react-bootstrap\";\r\nimport { FaFacebookF, FaGithub, FaLinkedinIn } from \"react-icons/fa\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"App-footer\">\r\n      <Container>\r\n        <Button\r\n          href=\"https://www.facebook.com/piotr.bator.33/\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaFacebookF />\r\n        </Button>\r\n        <Button\r\n          href=\"https://github.com/mizuris/car-wallet-react\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaGithub />\r\n        </Button>\r\n        <Button\r\n          href=\"https://www.linkedin.com/in/piotr-b%C4%85tor-b4b95620a/\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaLinkedinIn />\r\n        </Button>\r\n        <p className=\"text-muted footer-text\">\r\n          Author: <strong>Piotr BÄ…tor.</strong>\r\n        </p>\r\n      </Container>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1>QRCode Center</h1>\r\n      <h5>Scan and generate your QR codes!</h5>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { AiOutlineReload } from \"react-icons/ai\";\r\nimport CodeGenerator from \"./Components/CodeGenerator\";\r\nimport CodeReader from \"./Components/CodeReader\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Footer from \"./Components/Footer\";\r\nimport Header from \"./Components/Header\";\r\n\r\nfunction App() {\r\n  const [displayComponent, setDisplayComponent] = useState(\"generator\");\r\n\r\n  const switchDisplay = () => {\r\n    displayComponent === \"generator\"\r\n      ? setDisplayComponent(\"reader\")\r\n      : setDisplayComponent(\"generator\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App p-0 m-0\">\r\n      <Header />\r\n      <div className=\"p-2\">\r\n        <Button\r\n          className=\"switch-button ml-auto mr-auto mb-3\"\r\n          variant=\"dark\"\r\n          onClick={() => switchDisplay()}\r\n        >\r\n          <AiOutlineReload /> Switch to{\" \"}\r\n          {displayComponent === \"generator\" ? \"reader\" : \"generator\"}\r\n        </Button>\r\n      </div>\r\n      <div className=\"main-content\">\r\n        {displayComponent === \"generator\" ? <CodeGenerator /> : <CodeReader />}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}