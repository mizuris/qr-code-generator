{"version":3,"sources":["Components/CodeGenerator/CodeGenerator.tsx","Components/CodeReader/CodeReader.tsx","Components/Footer.tsx","Components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CodeGenerator","useState","qrText","setQrText","qrUrl","setQrUrl","scrollRef","useRef","generateQRCode","a","QRCode","toDataURL","response","current","scrollIntoView","behavior","console","log","handleSubmit","e","preventDefault","Form","className","onSubmit","Control","type","value","placeholder","onChange","target","Button","variant","href","download","src","alt","ref","CodeReader","result","error","scan","setScan","options","legacyMode","resolution","delay","facingMode","onScan","data","onError","Footer","Container","Header","App","displayComponent","setDisplayComponent","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3bcf53e.chunk.js","sourcesContent":["import React, { FormEvent, useState, useRef } from \"react\";\r\nimport QRCode from \"qrcode\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nfunction CodeGenerator() {\r\n  const [qrText, setQrText] = useState(\"\");\r\n  const [qrUrl, setQrUrl] = useState(\"\");\r\n\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  const generateQRCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(qrText);\r\n      setQrUrl(response);\r\n      scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    await generateQRCode();\r\n    setQrText(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form className=\"generator-form\" onSubmit={handleSubmit}>\r\n        <Form.Control\r\n          className=\"generator-input\"\r\n          type=\"text\"\r\n          value={qrText}\r\n          placeholder=\"Text to convert\"\r\n          onChange={(e) => setQrText(e.target.value)}\r\n        />\r\n        <Button className=\"generator-button\" type=\"submit\" variant=\"warning\">\r\n          Generate\r\n        </Button>\r\n      </Form>\r\n      <div className=\"generator-result\" key={qrUrl}>\r\n        {qrUrl ? (\r\n          <>\r\n            <a href={qrUrl} download={qrText}>\r\n              <img className=\"generator-result-img\" src={qrUrl} alt={qrText} />\r\n            </a>\r\n            <p className=\"generator-result-text text-muted\">\r\n              Click the code to dowload it.\r\n            </p>\r\n            <div ref={scrollRef}></div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CodeGenerator;\r\n","import React, { useState, useRef } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nfunction CodeReader() {\r\n  const [scan, setScan] = useState({\r\n    result: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  const options = {\r\n    legacyMode: false,\r\n    resolution: 600,\r\n    delay: 500,\r\n  };\r\n\r\n  const handleScan = (data: string | null) => {\r\n    if (data) {\r\n      setScan({ ...scan, result: data });\r\n      scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const handleError = (error: string) => {\r\n    setScan({ ...scan, error });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <QrReader\r\n        className=\"reader-content\"\r\n        legacyMode={options.legacyMode}\r\n        resolution={options.resolution}\r\n        delay={options.delay}\r\n        facingMode={\"environment\"}\r\n        onScan={handleScan}\r\n        onError={handleError}\r\n      />\r\n      {scan.result ? (\r\n        <div className=\"reader-result\" key={scan.result}>\r\n          <h6 className=\"text-muted\">Scanned code result:</h6>\r\n          <a className=\"reader-result-text\" href={scan.result} target=\"blank\">\r\n            {scan.result}\r\n          </a>\r\n          <div ref={scrollRef}></div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"reader-no-result\">\r\n          <h6 className=\"text-muted\">Scan QR code to get result.</h6>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CodeReader;\r\n","import React from \"react\";\r\nimport { Button, Container } from \"react-bootstrap\";\r\nimport { FaFacebookF, FaGithub, FaLinkedinIn } from \"react-icons/fa\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"App-footer\">\r\n      <Container>\r\n        <Button\r\n          href=\"https://www.facebook.com/piotr.bator.33/\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaFacebookF />\r\n        </Button>\r\n        <Button\r\n          href=\"https://github.com/mizuris/car-wallet-react\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaGithub />\r\n        </Button>\r\n        <Button\r\n          href=\"https://www.linkedin.com/in/piotr-b%C4%85tor-b4b95620a/\"\r\n          target=\"blank\"\r\n          className=\"m-1 footer-button\"\r\n          variant=\"outline-dark\"\r\n        >\r\n          <FaLinkedinIn />\r\n        </Button>\r\n        <p className=\"text-muted footer-text\">\r\n          Author: <strong>Piotr BÄ…tor.</strong>\r\n        </p>\r\n      </Container>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1>QRCode Center</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlineReload } from \"react-icons/ai\";\r\nimport CodeGenerator from \"./Components/CodeGenerator/CodeGenerator\";\r\nimport CodeReader from \"./Components/CodeReader/CodeReader\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Footer from \"./Components/Footer\";\r\nimport Header from \"./Components/Header\";\r\n\r\nfunction App() {\r\n  const [displayComponent, setDisplayComponent] = useState(\"generator\");\r\n\r\n  const switchDisplay = () => {\r\n    displayComponent === \"generator\"\r\n      ? setDisplayComponent(\"reader\")\r\n      : setDisplayComponent(\"generator\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App p-0 m-0\">\r\n      <Header />\r\n      <div className=\"p-2\">\r\n        <Button\r\n          className=\"switch-button ml-auto mr-auto mb-3\"\r\n          variant=\"dark\"\r\n          onClick={() => switchDisplay()}\r\n        >\r\n          <AiOutlineReload /> Switch to{\" \"}\r\n          {displayComponent === \"generator\" ? \"reader\" : \"generator\"}\r\n        </Button>\r\n      </div>\r\n      <main className=\"main-content\">\r\n        {displayComponent === \"generator\" ? <CodeGenerator /> : <CodeReader />}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}